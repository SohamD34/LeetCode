{"id":1451391189,"question_id":2050,"lang":"cpp","lang_name":"C++","time":"1 week, 3 days","timestamp":1731484201,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1451391189/","is_pending":"Not Pending","title":"Count Good Numbers","memory":"7.6 MB","code":"class Solution {\npublic:\n    int M = 1e9+7;\n\n    /*\n    For even n we will have perfectly n/2 groups each having 20 options.\n    Thus we first find out 20^(n/2). If n is odd multiply it by 5. Then return.\n    For calculating power we will use recursive binary exponentiation.\n    */\n\n    long long power(long long b, long long e, long long ans) {\n        if(e == 0){\n            return ans;\n        }\n        if(e & 1){\n            return power(b, e-1, (ans*b)%M);\n        }\n        return power((b*b)%M, e/2, ans);\n    }\n\n    int countGoodNumbers(long long n) {\n\n        long long temp = power(20, n/2, 1);\n        \n        return (n&1) ? (temp*5)%M : temp;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"count-good-numbers","has_notes":false,"flag_type":1}
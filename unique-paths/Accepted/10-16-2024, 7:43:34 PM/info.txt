{"id":1424327057,"question_id":62,"lang":"cpp","lang_name":"C++","time":"1 month, 1 week","timestamp":1729088014,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1424327057/","is_pending":"Not Pending","title":"Unique Paths","memory":"7.8 MB","code":"class Solution {\npublic:\n    vector<vector<int>> initialise_grid(int rows, int columns){\n        \n        vector<vector<int>> grid;\n\n        for(int i=0; i<rows; i++){\n            vector<int> v;\n            for(int j=0; j<columns; j++){\n                v.push_back(0);\n            }\n            grid.push_back(v);\n        }\n        return grid;\n    }\n\n    int uniquePaths(int m, int n) {\n        \n        vector<vector<int>> dp = initialise_grid(m, n);\n\n        // starting point \n        dp[0][0] = 1;\n\n        // Since we can only move right or down, for each cell on top row and left-most column --\n        \n        for(int i=1; i<n; i++){\n            dp[0][i] = 1;\n        }\n        for(int i=1; i<m; i++){\n            dp[i][0] = 1;\n        }\n\n        // Now for the middle elements, we can either go from previous left->right or from previous top->bottom\n\n        for(int i=1; i<m; i++){\n            for(int j=1; j<n; j++){\n                dp[i][j] = dp[i-1][j] + dp[i][j-1];\n            }\n        }\n\n        return dp[m-1][n-1];\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111","title_slug":"unique-paths","has_notes":false,"flag_type":1}
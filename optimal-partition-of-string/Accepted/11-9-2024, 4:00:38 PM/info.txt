{"id":1447500976,"question_id":2487,"lang":"cpp","lang_name":"C++","time":"2Â weeks","timestamp":1731148238,"status":10,"status_display":"Accepted","runtime":"11 ms","url":"/submissions/detail/1447500976/","is_pending":"Not Pending","title":"Optimal Partition of String","memory":"11.8 MB","code":"class Solution {\npublic:\n    int partitionString(string s) {\n        \n        int n = s.length();\n        int count = 0;\n        string curr_string = \"\";\n\n        int count_chars[26] = {0};\n\n        for(int i=0; i<n; i++){\n            if(count_chars[s[i] - 'a'] == 1){\n                count += 1;\n\n                for(int j=0; j<26; j++){\n                    count_chars[j] = 0;\n                }\n\n                curr_string = \"\";\n                curr_string += s[i];\n                count_chars[s[i] - 'a'] = 1;\n            }\n            else{\n                curr_string += s[i];\n                count_chars[s[i] - 'a'] = 1;\n            }\n        }\n\n        if(curr_string.length() > 0){\n            count++;\n        }\n        return count;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111","title_slug":"optimal-partition-of-string","has_notes":false,"flag_type":1}
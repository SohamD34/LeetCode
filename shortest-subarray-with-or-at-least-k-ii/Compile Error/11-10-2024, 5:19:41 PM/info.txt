{"id":1448621592,"question_id":3380,"lang":"cpp","lang_name":"C++","time":"1 week, 6 days","timestamp":1731239381,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/1448621592/","is_pending":"Not Pending","title":"Shortest Subarray With OR at Least K II","memory":"N/A","code":"class Solution {\npublic:\n    int minimumSubarrayLength(vector<int>& nums, int k) {\n\n        int n = nums.size();\n        int ans = n+1; \n        int or_val = 0; \n        \n        // to store how many bit at ith position in the window is set, we use bitMap\n\n        vector<int> bitMap(32, 0); \n        int left = 0; \n\n        for(int right=0; right<n; i++) {\n            \n            or_val |= nums[i]; \n            \n            // set the bits in bitCount for nums[i]\n\n            for(int j=31; j>=0; j--) {\n                bitMap[j] += ((nums[i] & (1 <<j)) > 0); \n            }\n            \n            // if or greater than k \n            while(left <= i && or_val >= k) {\n\n                if(or_val >= k){\n                    ans = min(ans, i-left+1); // update answer\n                }\n\n                // now we need to remove left number from the or value\n                // using bitMap as a bit mask\n\n                int new_or = 0; \n\n                for(int j=31; j>=0; j--) {\n\n                    int bit = nums[left] & (1 << j); \n                    bitMap[j] -= bit > 0;  \n\n                    // if bitCount[j] > 0, ith bit still set, set the bit in new_or \n\n                    if(bitMap[j] > 0){\n                        new_or |= (1 << j);\n                    }  \n                }\n                \n                or_val = new_or; \n                left++; \n            }\n            \n        }\n        \n        return ans == (n+1) ? -1 : ans; \n    }\n};","compare_result":null,"title_slug":"shortest-subarray-with-or-at-least-k-ii","has_notes":false,"flag_type":1}
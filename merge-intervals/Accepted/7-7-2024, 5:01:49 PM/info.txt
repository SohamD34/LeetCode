{"id":1312792328,"question_id":56,"lang":"cpp","lang_name":"C++","time":"4 months, 2 weeks","timestamp":1720351909,"status":10,"status_display":"Accepted","runtime":"16 ms","url":"/submissions/detail/1312792328/","is_pending":"Not Pending","title":"Merge Intervals","memory":"22.9 MB","code":"class Solution {\npublic:\n    Solution(){\n        ios_base::sync_with_stdio(false);\n        cin.tie(nullptr);\n        cout.tie(nullptr);\n    }\n    vector<vector<int>> merge(vector<vector<int>>& intervals) {\n        \n        sort(intervals.begin(), intervals.end());\n\n        int curr_start = 0;\n        int curr_end = 0;\n        int new_start;\n        int new_end;\n        \n        vector<vector<int>> merged_intervals;\n\n        for(int i = 0; i < intervals.size(); i++){\n            if(i == 0){\n                curr_start = intervals[i][0];\n                curr_end = intervals[i][1];\n            }\n            else{\n                new_start = intervals[i][0];\n                new_end = intervals[i][1];\n\n                if(new_start <= curr_end){\n                    curr_end = max(curr_end, new_end);\n                }\n                else{\n                    merged_intervals.push_back({curr_start, curr_end});\n                    curr_start = new_start;\n                    curr_end = new_end;\n                }\n            }\n        }\n\n        merged_intervals.push_back({curr_start, curr_end});\n        return merged_intervals;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"merge-intervals","has_notes":false,"flag_type":1}
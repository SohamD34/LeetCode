{"id":1373530399,"question_id":783,"lang":"cpp","lang_name":"C++","time":"2 months, 3 weeks","timestamp":1725044607,"status":10,"status_display":"Accepted","runtime":"20 ms","url":"/submissions/detail/1373530399/","is_pending":"Not Pending","title":"Search in a Binary Search Tree","memory":"33.6 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    Solution(){\n        ios_base::sync_with_stdio(false);\n        cin.tie(NULL);\n    }\n    TreeNode* searchBST(TreeNode* root, int val) {\n\n        if(!root){\n            return nullptr;\n        }\n        \n        if(root->val == val){\n            return root;\n        }\n        else if(root->val < val){\n            return searchBST(root->right, val);\n        }\n        return searchBST(root->left, val);\n    }\n};","compare_result":"111111111111111111111111111111111111","title_slug":"search-in-a-binary-search-tree","has_notes":false,"flag_type":1}
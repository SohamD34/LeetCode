{"id":1450540316,"question_id":2179,"lang":"cpp","lang_name":"C++","time":"1 week, 4 days","timestamp":1731412712,"status":10,"status_display":"Accepted","runtime":"46 ms","url":"/submissions/detail/1450540316/","is_pending":"Not Pending","title":"Most Beautiful Item for Each Query","memory":"94 MB","code":"class Solution {\npublic:\n    vector<int> maximumBeauty(vector<vector<int>>& items, vector<int>& queries) {\n        \n        // items = {price, beauty}\n        // sort the items array based on prices\n\n        sort(items.begin(), items.end());\n\n        // also sort queries -- but then we will not be able to aanswer in the expected order, so we convert queries to pairs -- (queries[i], i) and sort.. use the 'i' later to put together the answer array.\n\n        vector<pair<int, int>> Q;\n        for(int i=0; i<queries.size(); i++){\n            Q.push_back({queries[i], i});\n        }\n\n        sort(Q.begin(), Q.end());\n\n        int max_beauty = 0;\n        int j = 0;\n\n        vector<int> ans(queries.size(), 0);\n\n        for(auto pair:Q){\n\n            int q = pair.first;\n            int i = pair.second;\n\n            while(j < items.size() && items[j][0] <= q){\n                max_beauty = ((max_beauty > items[j][1]) ? max_beauty : items[j][1]);\n                j++;\n            }\n\n            ans[i] = max_beauty;\n        }\n\n        return ans;\n    }\n};","compare_result":"11111111111111111111111111111111111","title_slug":"most-beautiful-item-for-each-query","has_notes":false,"flag_type":1}
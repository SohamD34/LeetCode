{"id":1347503843,"question_id":235,"lang":"cpp","lang_name":"C++","time":"3 months, 2 weeks","timestamp":1723018949,"status":10,"status_display":"Accepted","runtime":"20 ms","url":"/submissions/detail/1347503843/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Search Tree","memory":"22.1 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\n\nclass Solution {\npublic:\n    Solution(){\n        ios_base::sync_with_stdio(false);\n        cin.tie(nullptr);\n        cout.tie(nullptr);\n    }\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n\n        if(root->val == p->val || root->val == q->val){\n            return root;\n        }   \n        if(root->val > p->val && root->val > q->val){\n            return lowestCommonAncestor(root->left, p, q);\n        }\n        if(root->val > p->val && root->val < q->val){\n            return root;\n        }\n        if(root->val < p->val && root->val > q->val){\n            return root;\n        }\n        return lowestCommonAncestor(root->right, p, q);\n    }\n};","compare_result":"111111111111111111111111111111","title_slug":"lowest-common-ancestor-of-a-binary-search-tree","has_notes":false,"flag_type":1}
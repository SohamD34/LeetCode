{"id":1297346046,"question_id":3464,"lang":"cpp","lang_name":"C++","time":"5Â months","timestamp":1719114401,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1297346046/","is_pending":"Not Pending","title":"Maximize Total Cost of Alternating Subarrays","memory":"N/A","code":"class Solution {\npublic:\n    Solution(){\n        ios_base::sync_with_stdio(false);\n        cin.tie(nullptr);\n        cout.tie(nullptr);\n    }\n    long long maximumTotalCost(vector<int>& nums) {\n        \n        int n = nums.size();\n        if(n==1) {\n            return nums[0];\n        }\n        if(n==2){\n            return max(nums[0] + nums[1], nums[0] - nums[1]);\n        }\n        if(n==3){\n            return max(max(nums[0]+nums[1]+nums[2], nums[0]-nums[1]+nums[2]), nums[0]+nums[1]-nums[2]);\n        }\n\n        long long sum = 0;\n        long long curr_sum = 0;\n        \n        for(int i=0; i<nums.size(); i++){\n            if(nums[i] < 0){\n                curr_sum += abs(nums[i]);\n                sum += abs(nums[i]);\n            }\n            else{\n                sum += nums[i];\n                curr_sum = nums[i];\n            }\n            // cout<<nums[i]<<\" \"<<curr_sum<<\" \"<<sum<<endl;\n        }\n        return sum;\n    }\n};","compare_resulttitle_slug":"maximize-total-cost-of-alternating-subarrays","has_notes":false,"flag_type":1}
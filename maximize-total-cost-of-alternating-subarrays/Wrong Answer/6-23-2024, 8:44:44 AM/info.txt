{"id":1297301026,"question_id":3464,"lang":"cpp","lang_name":"C++","time":"5Â months","timestamp":1719112484,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1297301026/","is_pending":"Not Pending","title":"Maximize Total Cost of Alternating Subarrays","memory":"N/A","code":"class Solution {\npublic:\n    Solution(){\n        ios_base::sync_with_stdio(false);\n        cin.tie(nullptr);\n        cout.tie(nullptr);\n    }\n    long long maximumTotalCost(vector<int>& nums) {\n        \n        long long total_cost = 0;\n        int split_index = 0;\n        \n        for(int i=0; i<nums.size(); i++){\n            \n            if(total_cost + nums[i]*pow(-1, split_index) < total_cost){\n                split_index = 0;\n            }\n\n            // cout<<nums[i]<<\" \"<<split_index<<endl;\n            total_cost += nums[i]*pow(-1, split_index);\n            split_index ++;\n        }\n        // cout<<endl;\n        return total_cost;\n    }\n};","compare_resulttitle_slug":"maximize-total-cost-of-alternating-subarrays","has_notes":false,"flag_type":1}
{"id":1419688002,"question_id":234,"lang":"cpp","lang_name":"C++","time":"1Â month, 1Â week","timestamp":1728716015,"status":10,"status_display":"Accepted","runtime":"158 ms","url":"/submissions/detail/1419688002/","is_pending":"Not Pending","title":"Palindrome Linked List","memory":"116.6 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    bool even_length = false;\n\n    ListNode* getmid(ListNode* head){\n\n        ListNode* slow = head;\n        ListNode* fast = head;\n\n        while(fast->next && fast->next->next){\n            slow = slow->next;\n            fast = fast->next->next;\n        }\n\n        if(fast->next){\n            slow = slow->next;\n            even_length = true;\n        }\n\n        return slow;\n    } \n\n    ListNode* reverseList(ListNode* head) {\n        ListNode* curr = head;\n        ListNode* prev = NULL;\n        if(head ==  NULL){\n            return head;\n        }\n        while(curr != NULL){\n            ListNode* temp = curr;\n            ListNode* rest = curr->next;\n            curr->next = prev;\n            curr = rest;\n            prev = temp;\n        }\n        return prev;\n    }\n\n    bool isPalindrome(ListNode* head) {\n\n        // base case - length = 1\n\n        if(head->next == NULL){\n            return true;\n        }\n\n        ListNode* slow = getmid(head);\n        \n        // slow pointer is where we have to start the second part\n        // so we split the linked list into 2 parts\n\n        ListNode* first = head;\n        ListNode* second = slow;\n        \n        if(!even_length){\n            second = slow->next;\n        }\n        \n        ListNode* ptr = first;\n        while((ptr->next != second && even_length) or (ptr->next->next != second && !even_length)){\n            ptr = ptr->next;       \n        }\n        ptr->next = NULL;\n\n        // Now that we have split the linked lists - we need to reverse the second_list;\n\n        ListNode* reversed_second = reverseList(second);\n\n        // now check element wise if all are same - if not -- return false\n\n        while(first && reversed_second){\n            if(first->val == reversed_second->val){\n                first = first->next;\n                reversed_second = reversed_second->next;\n            }\n            else{\n                return false;\n            }\n        }\n\n        return true;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"palindrome-linked-list","has_notes":false,"flag_type":1}
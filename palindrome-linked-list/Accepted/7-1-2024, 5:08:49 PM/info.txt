{"id":1305789561,"question_id":234,"lang":"cpp","lang_name":"C++","time":"4Â months, 3Â weeks","timestamp":1719833929,"status":10,"status_display":"Accepted","runtime":"158 ms","url":"/submissions/detail/1305789561/","is_pending":"Not Pending","title":"Palindrome Linked List","memory":"118.9 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* findMiddleNode(ListNode* head){\n        ListNode* fast = head;\n        ListNode* slow = head;\n\n        while(fast->next){\n            fast = fast->next;\n            if(fast->next){\n                fast = fast->next;\n            }\n            slow = slow->next;\n        }\n\n        return slow;\n    }\n\n    ListNode* reverseList(ListNode* head) {\n\n        if(!head || !head->next){\n            return head;\n        }\n        else{\n            ListNode* reversed_part = reverseList(head->next);\n            ListNode* prev = NULL;\n            head->next->next = head;\n            head->next = prev;\n            return reversed_part;\n        }\n        \n    }\n\n    bool isPalindrome(ListNode* head) {\n\n        ListNode* mid = findMiddleNode(head);\n        ListNode* reversed = reverseList(mid);\n\n        while(reversed){\n            if(reversed->val != head->val){\n                return false;\n            }\n            reversed = reversed->next;\n            head = head->next;\n        }\n        return true;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"palindrome-linked-list","has_notes":false,"flag_type":1}
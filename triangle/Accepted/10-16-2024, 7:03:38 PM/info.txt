{"id":1424289723,"question_id":120,"lang":"cpp","lang_name":"C++","time":"1 month, 1 week","timestamp":1729085618,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1424289723/","is_pending":"Not Pending","title":"Triangle","memory":"12.2 MB","code":"class Solution {\npublic:\n    Solution(){\n        ios_base::sync_with_stdio(false);\n        cin.tie(NULL);\n        cout.tie(NULL);\n    }\n    int minimumTotal(vector<vector<int>>& triangle) {\n        \n        int layers = triangle.size();\n\n        // Initialise a triangular DP\n\t    \n        vector<vector<int>> dp;\n\t    \n\t    for(int i=1; i<=layers; i++){\n\t        vector<int>dplayer;\n\t        for(int j=0; j<i; j++){\n\t            dplayer.push_back(0);\n\t        }\n\t        dp.push_back(dplayer);\n\t    }\n\t    \n        // First value of DP  = top of triangle\n\t    \n\t    dp[0][0] = triangle[0][0];\n\t    \n        /* \n        Sum at a node -- 3 cases\n        1) Leftmost --> 1 choice --> previous leftmost \n        2) Middle elements --> 2 choices (left or right)\n        3) Rightmost --> 1 choice ---> previous rightmost\n\t    */\n\n\t    for(int i=1; i<layers; i++){\n            \n            // Leftmost\n            dp[i][0] = dp[i-1][0] + triangle[i][0];\n\t        \n            // Middle\n\t        for(int j=1; j<i; j++){\n\t            dp[i][j] = triangle[i][j] + min(dp[i-1][j], dp[i-1][j-1]);\n\t        }\n\n            // Rightmost\n            dp[i][i] = dp[i-1][i-1] + triangle[i][i];\n\t    }\n\t    \n\t    int min_sum = dp[layers-1][0];\n\t    for(int i=0; i<layers;i++){\n\t        if(dp[layers-1][i] < min_sum){\n\t            min_sum = dp[layers-1][i];\n\t        }\n\t    }\n\t    \n\n        return min_sum;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111","title_slug":"triangle","has_notes":false,"flag_type":1}
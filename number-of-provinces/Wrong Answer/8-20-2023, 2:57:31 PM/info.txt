{"id":1026585997,"question_id":547,"lang":"cpp","lang_name":"C++","time":"1 year, 3 months","timestamp":1692523651,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1026585997/","is_pending":"Not Pending","title":"Number of Provinces","memory":"N/A","code":"class Solution {\npublic:\n\n    void dfs(vector<vector<int> >& matrix, vector<vector<bool> >& visited, int x, int y, int n, int m){\n        if (x < 0 || y < 0 || x >= n || y >= m|| visited[x][y] == true || matrix[x][y] == 0){\n            return;\n        }\n        visited[x][y] = true;\n\n        dfs(matrix, visited, x + 1, y, n, m);\n        dfs(matrix, visited, x, y + 1, n, m);\n        dfs(matrix, visited, x - 1, y, n, m);\n        dfs(matrix, visited, x, y - 1, n, m);\n    }\n \n    int countClosedIsland(vector<vector<int> >& matrix, int n,int m){\n\n        vector<vector<bool> > visited(n,vector<bool>(m, false));\n\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < m; ++j) {\n                if ((i * j == 0 || i == n - 1 || j == m - 1) and matrix[i][j] == 1 and visited[i][j] == false)\n                    dfs(matrix, visited, i, j, n, m);\n            }\n        }\n        int result = 0;\n    \n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < m; ++j) {\n                if (visited[i][j] == false and matrix[i][j] == 1) {\n                    result++;\n                    dfs(matrix, visited, i, j, n, m);\n                }\n            }\n        }\n        return result;\n    }\n\n    int findCircleNum(vector<vector<int>>& isConnected) {\n        \n        return countClosedIsland(isConnected, isConnected.size(),isConnected[0].size());\n    }\n};","compare_result":"000000000000000000000000000000000000000000000000000000000010000110000000000010000010000000000000000000000000000000","title_slug":"number-of-provinces","has_notes":false,"flag_type":1}